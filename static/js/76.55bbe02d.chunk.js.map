{"version":3,"file":"static/js/76.55bbe02d.chunk.js","mappings":"oPACA,GAAgB,SAAW,uBAAuB,SAAW,uBAAuB,SAAW,uBAAuB,cAAgB,4BAA4B,eAAiB,6BAA6B,eAAiB,8B,SC8DjO,EAzDa,WACT,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OAnBCE,EAAAA,EAAAA,YAAU,WACP,IAAMC,EAAU,mCAAG,2FAEfJ,EAAQ,MAFO,mBAKIK,EAAAA,EAAAA,IAAgBJ,GALpB,OAKTK,EALS,OAOfN,EAAQM,GAPO,gDAUfC,QAAQC,IAAR,MAVe,yDAAH,qDAchBJ,GACH,GAAE,CAACH,IAGGF,GAAwB,IAAhBA,EAAKU,QAChB,cAAGC,UAAWC,EAAAA,eAAd,4BAEI,0BACI,eAAID,UAAWC,EAAAA,SAAf,SACKZ,GAAQA,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OAGd,gBAAaP,UAAWC,EAAAA,SAAxB,WACI,gBAAKD,UAAWC,EAAAA,SAAiBO,IAAG,yCAAoCJ,GACxEK,IAAQJ,KAEZ,cAAGL,UAAWC,EAAAA,SAAd,SAAgCK,KAC5B,eAAGN,UAAWC,EAAAA,cAAd,wBAAgDM,OAL3CJ,EAHK,OAcrC,C,8LC/CKO,EAAM,mCACNC,EAAW,gCAEJC,EAAkB,mCAAG,oGACPC,EAAAA,GAAAA,IAAA,UAAaF,EAAb,sCAAmDD,IAD5C,UAGN,OAFlBI,EADwB,QAGjBC,OAHiB,sBAIpB,IAAIC,MAAM,wBAJU,gCAOvBF,EAASlB,KAAKqB,SAPS,2CAAH,qDAWlBC,EAAiB,mCAAG,WAAOC,GAAP,uFACNN,EAAAA,GAAAA,IAAA,UAAaF,EAAb,gCAA6CD,EAA7C,yBAAiES,IAD3D,UAGL,OAFlBL,EADuB,QAGhBC,OAHgB,sBAInB,IAAIC,MAAM,wBAJS,cAM7BnB,QAAQC,IAAIgB,EAASlB,MANQ,kBAOtBkB,EAASlB,KAAKqB,SAPQ,2CAAH,sDAWjBG,EAAkB,mCAAG,WAAO7B,GAAP,uFACPsB,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA8BpB,EAA9B,oBAAiDmB,IAD1C,UAGN,OAFlBI,EADwB,QAGjBC,OAHiB,sBAIpB,IAAIC,MAAM,wBAJU,gCAMvBF,EAASlB,MANc,2CAAH,sDASlBD,EAAe,mCAAG,WAAOQ,GAAP,uFACJU,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA8BR,EAA9B,4BAAoDO,IADhD,UACrBI,EADqB,OAE/BjB,QAAQC,IAAIgB,GACgB,MAApBA,EAASC,OAHc,sBAIjB,IAAIC,MAAM,wBAJO,gCAMpBF,EAASlB,KAAKP,MANM,2CAAH,sDASfgC,EAAe,mCAAI,WAAO9B,GAAP,uFACLsB,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA8BpB,EAA9B,4BAAyDmB,IADpD,UAGJ,OAFlBI,EADsB,QAGfC,OAHe,sBAIlB,IAAIC,MAAM,wBAJQ,gCAMrBF,EAASlB,KAAKqB,SANO,2CAAJ,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/moviesApi.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\",\"castName\":\"Cast_castName__-i08u\",\"castCharacter\":\"Cast_castCharacter__Rliw1\",\"castCharacterS\":\"Cast_castCharacterS__DRhXb\",\"detailsMessage\":\"Cast_detailsMessage__drfT1\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/moviesApi';\nimport styles from 'components/Cast/Cast.module.css'\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const { movieId } = useParams();\n    \n\n     useEffect(() => {\n        const fetchMovie = async () => {\n           \n            setCast(null)\n\n        try {\n            const data = await getMovieCredits(movieId)\n\n            setCast(data)\n\n        } catch (error) {\n            console.log(error)\n        \n        }\n    }\n        fetchMovie();\n    }, [movieId])\n\n\n    return cast && cast.length === 0 ? (\n        <p className={styles.detailsMessage}>No iformation</p>) :\n        (\n            <div>\n                <ul className={styles.castList}>\n                    {cast && cast.map(({ id, profile_path, original_name, name, character }) => (\n                         \n                   \n                        <li key={id} className={styles.castItem}>\n                            <img className={styles.movieImg} src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                            alt = { original_name }/>\n                        \n                        <p className={styles.castName}>{name}</p>\n                            <p className={styles.castCharacter}>Character: {character}</p>\n                            </li>\n                    ))}\n                </ul>\n            </div>\n    )\n}\n\nCast.propTypes = {\n    cast: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            profile_path: PropTypes.string.isRequired,\n            original_name: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            character: PropTypes.string.isRequired,\n        })\n    )\n}\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst KEY = 'ffa446ff4e98eda704f81d136e56b989';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY}`);\n\n    if (response.status !== 200) {\n        throw new Error('Error, nothing found');\n      \n    }\n    return response.data.results;\n    \n};\n\nexport const fetchSearchMovies = async (query) => {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&page=1&query=${query}`);\n\n    if (response.status !== 200) {\n        throw new Error('Error, nothing found');\n    }\n    console.log(response.data)\n    return response.data.results;\n    \n};\n\nexport const fetchMoviesDetails = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}`)\n\n    if (response.status !== 200) {\n        throw new Error('Error, nothing found');\n    }\n    return response.data;\n};\n\nexport const getMovieCredits = async (id) => {\n    const response = await axios.get(`${BASE_URL}movie/${id}/credits?api_key=${KEY}`)\nconsole.log(response)\n    if (response.status !== 200) {\n        throw new Error('Error, nothing found');\n    }\n    return response.data.cast;\n}\n\nexport const getMovieReviews  = async (movieId) => {\n    const response = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}`)\n\n    if (response.status !== 200) {\n        throw new Error('Error, nothing found');\n    }\n    return response.data.results;\n}"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchMovie","getMovieCredits","data","console","log","length","className","styles","map","id","profile_path","original_name","name","character","src","alt","KEY","BASE_URL","fetchPopularMovies","axios","response","status","Error","results","fetchSearchMovies","query","fetchMoviesDetails","getMovieReviews"],"sourceRoot":""}